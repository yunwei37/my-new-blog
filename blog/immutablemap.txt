1:"$Sreact.fragment"
2:I[1478,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],"ThemeProviders"]
3:I[4091,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],"default"]
4:I[9243,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],""]
5:I[7392,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],"KBarSearchProvider"]
6:I[6874,["874","static/chunks/874-8edb22cc7428423c.js","63","static/chunks/63-d245e42a784ca56d.js","909","static/chunks/app/blog/%5B...slug%5D/page-71c7cfee63112339.js"],""]
e:I[8393,[],""]
:HL["/_next/static/media/36966cca54120369-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/a06d7e24bf9a7d93.css","style"]
:HL["/_next/static/css/54f53e18fb3a4e82.css","style"]
:HL["/_next/static/css/7246298b30c42979.css","style"]
0:{"P":null,"b":"ER0GCm_u0u-RRwl37uz71","p":"","c":["","blog","immutablemap"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","immutablemap","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a06d7e24bf9a7d93.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/54f53e18fb3a4e82.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/static/favicons/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/svg+xml","href":"/static/favicons/favicon.svg"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/static/favicons/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/static/favicons/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/static/favicons/safari-pinned-tab.svg","color":"#5bbad5"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}],["$","body",null,{"className":"pl-[calc(100vw-100%)] text-black antialiased dark:text-white min-h-screen","children":["$","$L2",null,{"children":[["$","$L3",null,{}],["$undefined","$undefined","$undefined",["$","$L4",null,{"async":true,"defer":true,"src":"https://analytics.umami.is/script.js"}],"$undefined","$undefined"],["$","div",null,{"className":"min-h-screen flex flex-col justify-center py-8","children":["$","div",null,{"className":"content-glass mx-auto w-full max-w-5xl px-4 sm:px-6 xl:px-8 py-8","children":["$","$L5",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center w-full justify-between py-6 border-b border-gray-200/30 dark:border-gray-700/30","children":[["$","$L6",null,{"className":"break-words","href":"/","aria-label":"yunwei37","children":["$","div",null,{"className":"flex items-center","children":[["$","div",null,{"className":"mr-3","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":40,"height":40,"fill":"none","children":[["$","defs",null,{"children":[["$","linearGradient",null,{"id":"logo_svg__a","x1":"0%","x2":"100%","y1":"0%","y2":"100%","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#3b82f6","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#06b6d4","stopOpacity":1}}]]}],["$","linearGradient",null,{"id":"logo_svg__b","x1":"0%","x2":"100%","y1":"0%","y2":"100%","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#8b5cf6","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#3b82f6","stopOpacity":1}}]]}]]}],["$","circle",null,{"cx":20,"cy":20,"r":18,"fill":"url(#logo_svg__a)","opacity":0.1}],["$","path",null,{"fill":"url(#logo_svg__a)","d":"m12 8 6 10v10h4V18l6-10h-4l-4 6-4-6Z"}],["$","path",null,{"fill":"url(#logo_svg__b)","d":"m8 24 4 8 4-8 4 8 4-8h8v4h-6l-4 8-4-8-4 8-4-8H8Z","opacity":0.8}],["$","circle",null,{"cx":32,"cy":12,"r":2,"fill":"url(#logo_svg__b)"}],["$","circle",null,{"cx":8,"cy":12,"r":1.5,"fill":"url(#logo_svg__a)","opacity":0.6}]]}]}],["$","div",null,{"className":"hidden text-2xl font-bold sm:block hover:text-primary-600 dark:hover:text-primary-400 transition-colors","children":"yunwei37"}]]}]}],["$","div",null,{"className":"flex items-center space-x-4","children":[["$","div",null,{"className":"no-scrollbar hidden items-center space-x-2 sm:flex","children":[["$","$L6","Blog",{"className":"px-3 py-2 rounded-lg transition-all duration-200 font-medium hover:text-primary-600 dark:hover:text-primary-400","href":"/blog","children":"Blog"}],["$","$L6","Docs",{"className":"px-3 py-2 rounded-lg transition-all duration-200 font-medium hover:text-primary-600 dark:hover:text-primary-400","href":"/docs","children":"Docs"}],["$","$L6","Tags",{"className":"px-3 py-2 rounded-lg transition-all duration-200 font-medium hover:text-primary-600 dark:hover:text-primary-400","href":"/tags","children":"Tags"}],["$","$L6","About",{"className":"px-3 py-2 rounded-lg transition-all duration-200 font-medium hover:text-primary-600 dark:hover:text-primary-400","href":"/about","children":"About"}]]}],"$L7"]}]]}],"$L8","$L9"]}]}]}]]}]}]]}]]}],{"children":["blog","$La",{"children":[["slug","immutablemap","c"],"$Lb",{"children":["__PAGE__","$Lc",{},null,false]},null,false]},null,false]},null,false],"$Ld",false]],"m":"$undefined","G":["$e",[]],"s":false,"S":true}
f:I[4159,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],"KBarButton"]
10:I[1762,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],"default"]
11:I[7298,["874","static/chunks/874-8edb22cc7428423c.js","650","static/chunks/650-5c537ecaa5d1cd34.js","177","static/chunks/app/layout-1a2cfbd13c591174.js"],"default"]
12:I[7555,[],""]
13:I[1295,[],""]
1e:I[9665,[],"OutletBoundary"]
20:I[4911,[],"AsyncMetadataOutlet"]
22:I[9665,[],"ViewportBoundary"]
24:I[9665,[],"MetadataBoundary"]
25:"$Sreact.suspense"
7:["$","div",null,{"className":"flex items-center space-x-2","children":[["$","$Lf",null,{"aria-label":"Search","className":"p-2 rounded-lg transition-all duration-200","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 hover:text-primary-600 dark:hover:text-primary-400 transition-colors","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$L10",null,{}],["$","$L11",null,{}]]}]
8:["$","main",null,{"className":"py-6","children":["$","$L12",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L13",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pt-6 pb-8 md:space-y-5","children":["$","h1",null,{"className":"text-6xl leading-9 font-extrabold tracking-tight md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl leading-normal font-bold md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L6",null,{"className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm leading-5 font-medium text-white shadow-xs transition-colors duration-150 hover:bg-blue-700 focus:outline-hidden dark:hover:bg-blue-500","href":"/","children":"Back to homepage"}]]}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]
9:["$","footer",null,{"className":"border-t border-gray-200/30 dark:border-gray-700/30 pt-8","children":["$","div",null,{"className":"flex flex-col items-center space-y-6","children":[["$","div",null,{"className":"flex flex-wrap justify-center gap-4","children":[["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:yunwei356@gmail.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Mail"}],["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/yunwei37","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"GitHub"}],["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]]}]]}],["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://facebook.com","children":[["$","span",null,{"className":"sr-only","children":"facebook"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Facebook"}],["$","path",null,{"d":"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"}]]}]]}],["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://youtube.com","children":[["$","span",null,{"className":"sr-only","children":"youtube"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Youtube"}],["$","path",null,{"d":"M23.499 6.203a3.008 3.008 0 00-2.089-2.089c-1.87-.501-9.4-.501-9.4-.501s-7.509-.01-9.399.501a3.008 3.008 0 00-2.088 2.09A31.258 31.26 0 000 12.01a31.258 31.26 0 00.523 5.785 3.008 3.008 0 002.088 2.089c1.869.502 9.4.502 9.4.502s7.508 0 9.399-.502a3.008 3.008 0 002.089-2.09 31.258 31.26 0 00.5-5.784 31.258 31.26 0 00-.5-5.808zm-13.891 9.4V8.407l6.266 3.604z"}]]}]]}],"$L14","$L15","$L16","$L17","$L18","$L19","$L1a"]}],"$L1b","$L1c"]}]}]
a:["$","$1","c",{"children":[null,["$","$L12",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L13",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
b:["$","$1","c",{"children":[null,["$","$L12",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L13",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
c:["$","$1","c",{"children":["$L1d",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7246298b30c42979.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L1e",null,{"children":["$L1f",["$","$L20",null,{"promise":"$@21"}]]}]]}]
d:["$","$1","h",{"children":[null,[["$","$L22",null,{"children":"$L23"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L24",null,{"children":["$","div",null,{"hidden":true,"children":["$","$25",null,{"fallback":null,"children":"$L26"}]}]}]]}]
14:["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://www.linkedin.com/in/yusheng-zheng-611920280","children":[["$","span",null,{"className":"sr-only","children":"linkedin"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Linkedin"}],["$","path",null,{"d":"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"}]]}]]}]
15:null
16:["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://bsky.app/","children":[["$","span",null,{"className":"sr-only","children":"bluesky"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Bluesky"}],["$","path",null,{"d":"M12 10.8c-1.087-2.114-4.046-6.053-6.798-7.995C2.566.944 1.561 1.266.902 1.565C.139 1.908 0 3.08 0 3.768c0 .69.378 5.65.624 6.479c.815 2.736 3.713 3.66 6.383 3.364q.204-.03.415-.056q-.207.033-.415.056c-3.912.58-7.387 2.005-2.83 7.078c5.013 5.19 6.87-1.113 7.823-4.308c.953 3.195 2.05 9.271 7.733 4.308c4.267-4.308 1.172-6.498-2.74-7.078a9 9 0 0 1-.415-.056q.21.026.415.056c2.67.297 5.568-.628 6.383-3.364c.246-.828.624-5.79.624-6.478c0-.69-.139-1.861-.902-2.206c-.659-.298-1.664-.62-4.3 1.24C16.046 4.748 13.087 8.687 12 10.8"}]]}]]}]
17:["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://x.com/yunwei37","children":[["$","span",null,{"className":"sr-only","children":"x"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"X"}],["$","path",null,{"d":"M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"}]]}]]}]
27:T69f,M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z18:["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://www.instagram.com","children":[["$","span",null,{"className":"sr-only","children":"instagram"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Instagram"}],["$","path",null,{"d":"$27"}]]}]]}]
28:T498,M12.186 24h-.007c-3.581-.024-6.334-1.205-8.184-3.509C2.35 18.44 1.5 15.586 1.472 12.01v-.017c.03-3.579.879-6.43 2.525-8.482C5.845 1.205 8.6.024 12.18 0h.014c2.746.02 5.043.725 6.826 2.098 1.677 1.29 2.858 3.13 3.509 5.467l-2.04.569c-1.104-3.96-3.898-5.984-8.304-6.015-2.91.022-5.11.936-6.54 2.717C4.307 6.504 3.616 8.914 3.589 12c.027 3.086.718 5.496 2.057 7.164 1.43 1.783 3.631 2.698 6.54 2.717 2.623-.02 4.358-.631 5.8-2.045 1.647-1.613 1.618-3.593 1.09-4.798-.31-.71-.873-1.3-1.634-1.75-.192 1.352-.622 2.446-1.284 3.272-.886 1.102-2.14 1.704-3.73 1.79-1.202.065-2.361-.218-3.259-.801-1.063-.689-1.685-1.74-1.752-2.964-.065-1.19.408-2.285 1.33-3.082.88-.76 2.119-1.207 3.583-1.291a13.853 13.853 0 0 1 3.02.142c-.126-.742-.375-1.332-.75-1.757-.513-.586-1.308-.883-2.359-.89h-.029c-.844 0-1.992.232-2.721 1.32L7.734 7.847c.98-1.454 2.568-2.256 4.478-2.256h.044c3.194.02 5.097 1.975 5.287 5.388.108.046.216.094.321.142 1.49.7 2.58 1.761 3.154 3.07.797 1.82.871 4.79-1.548 7.158-1.85 1.81-4.094 2.628-7.277 2.65Zm1.003-11.69c-.242 0-.487.007-.739.021-1.836.103-2.98.946-2.916 2.143.067 1.256 1.452 1.839 2.784 1.767 1.224-.065 2.818-.543 3.086-3.71a10.5 10.5 0 0 0-2.215-.221z19:["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://www.threads.net","children":[["$","span",null,{"className":"sr-only","children":"threads"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Threads"}],["$","path",null,{"d":"$28"}]]}]]}]
1a:["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://medium.com","children":[["$","span",null,{"className":"sr-only","children":"medium"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Medium"}],["$","path",null,{"d":"M13.54 12a6.8 6.8 0 01-6.77 6.82A6.8 6.8 0 010 12a6.8 6.8 0 016.77-6.82A6.8 6.8 0 0113.54 12zM20.96 12c0 3.54-1.51 6.42-3.38 6.42-1.87 0-3.39-2.88-3.39-6.42s1.52-6.42 3.39-6.42 3.38 2.88 3.38 6.42M24 12c0 3.17-.53 5.75-1.19 5.75-.66 0-1.19-2.58-1.19-5.75s.53-5.75 1.19-5.75C23.47 6.25 24 8.83 24 12z"}]]}]]}]
1b:["$","div",null,{"className":"flex space-x-2 text-sm opacity-80","children":[["$","div",null,{"children":"Yusheng Zheng"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L6",null,{"className":"hover:text-primary-500 transition-colors","href":"/","children":"云微的胡思乱想"}]]}]
1c:["$","div",null,{"className":"text-sm opacity-60","children":["$","a",null,{"className":"hover:text-primary-500 transition-colors","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/timlrx/tailwind-nextjs-starter-blog","children":"Tailwind Nextjs Theme"}]}]
29:I[1839,["874","static/chunks/874-8edb22cc7428423c.js","63","static/chunks/63-d245e42a784ca56d.js","909","static/chunks/app/blog/%5B...slug%5D/page-71c7cfee63112339.js"],"default"]
2a:I[3063,["874","static/chunks/874-8edb22cc7428423c.js","63","static/chunks/63-d245e42a784ca56d.js","909","static/chunks/app/blog/%5B...slug%5D/page-71c7cfee63112339.js"],"Image"]
1d:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"用 rust 实现可持久化 AVL 树：ImmutableMap\",\"datePublished\":\"2022-03-18T02:41:06.000Z\",\"dateModified\":\"2022-03-18T02:41:06.000Z\",\"image\":\"/static/images/twitter-card.png\",\"url\":\"https://www.yunwei37.com/blog/immutablemap\",\"author\":[{\"@type\":\"Person\",\"name\":\"Yusheng Zheng (云微)\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L29",null,{}],["$","article",null,{"className":"content-glass p-8","children":["$","div",null,{"className":"xl:divide-y xl:divide-gray-200/30 xl:dark:divide-gray-700/30","children":[["$","header",null,{"className":"pt-6 xl:pb-6","children":["$","div",null,{"className":"space-y-4 text-center","children":[["$","dl",null,{"className":"space-y-4","children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base leading-6 font-medium text-gray-600 dark:text-gray-300","children":["$","time",null,{"dateTime":"2022-03-18T02:41:06.000Z","children":"Friday, March 18, 2022"}]}]]}]}],["$","div",null,{"children":["$","h1",null,{"className":"text-3xl leading-9 font-extrabold tracking-tight sm:text-4xl sm:leading-10 md:text-5xl md:leading-14","children":"用 rust 实现可持久化 AVL 树：ImmutableMap"}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200/30 pb-8 xl:grid xl:grid-cols-4 xl:gap-x-8 xl:divide-y-0 dark:divide-gray-700/30","children":[["$","dl",null,{"className":"pt-6 pb-10 xl:border-b xl:border-gray-200/30 xl:pt-11 xl:dark:border-gray-700/30","children":[["$","dt",null,{"className":"sr-only","children":"Authors"}],["$","dd",null,{"children":["$","ul",null,{"className":"flex flex-wrap justify-center gap-4 sm:space-x-12 xl:block xl:space-y-6 xl:space-x-0","children":[["$","li","Yusheng Zheng (云微)",{"className":"flex items-center space-x-3 glass p-4 rounded-xl","children":[["$","$L2a",null,{"src":"/static/images/avatar.png","width":38,"height":38,"alt":"avatar","className":"h-10 w-10 rounded-full"}],["$","dl",null,{"className":"text-sm leading-5 font-medium whitespace-nowrap","children":[["$","dt",null,{"className":"sr-only","children":"Name"}],["$","dd",null,{"className":"text-gray-900 dark:text-gray-100","children":"Yusheng Zheng (云微)"}],["$","dt",null,{"className":"sr-only","children":"Twitter"}],["$","dd",null,{"children":["$","a",null,{"className":"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 transition-colors","target":"_blank","rel":"noopener noreferrer","href":"https://twitter.com/yunwei37","children":"@yunwei37"}]}]]}]]}]]}]}]]}],["$","div",null,{"className":"divide-y divide-gray-200/30 xl:col-span-3 xl:row-span-2 xl:pb-0 dark:divide-gray-700/30","children":[["$","div",null,{"className":"prose dark:prose-invert max-w-none pt-10 pb-8 text-gray-700 dark:text-gray-200","children":[["$","blockquote",null,{"children":["$","p",null,{"children":"这几篇想简单谈谈一下自己在写代码时遇见的，或者阅读 llvm 相关代码时见到的数据结构实现。"}]}],["$","p",null,{"children":["本文源代码：",["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/yunwei37/immutable-map-rs","children":"https://github.com/yunwei37/immutable-map-rs"}]]}],["$","h2",null,{"className":"content-header","id":"关于-immutablemap","children":[["$","a",null,{"className":"break-words","href":"#关于-immutablemap","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"关于 ImmutableMap"]}],"$L2b","$L2c","$L2d","$L2e","$L2f","$L30","$L31","$L32","$L33","$L34","$L35","$L36","$L37","$L38","$L39","$L3a","$L3b","$L3c","$L3d","$L3e","$L3f","$L40","$L41","$L42","$L43","$L44","$L45","$L46","$L47","$L48","$L49","$L4a","$L4b","$L4c","$L4d","$L4e","$L4f","$L50","$L51","$L52","$L53"]}],"$L54","$L55"]}],"$L56"]}]]}]}]]}]]
57:I[2100,["874","static/chunks/874-8edb22cc7428423c.js","63","static/chunks/63-d245e42a784ca56d.js","909","static/chunks/app/blog/%5B...slug%5D/page-71c7cfee63112339.js"],"default"]
66:I[1449,["874","static/chunks/874-8edb22cc7428423c.js","63","static/chunks/63-d245e42a784ca56d.js","909","static/chunks/app/blog/%5B...slug%5D/page-71c7cfee63112339.js"],"default"]
2b:["$","p",null,{"children":["ImmutableMap 是一种可持久化数据结构，在进行插入或删除操作时并不对原先的数据结构进行改动，而是创建一个新的拷贝。关于可持久化数据结构，可以参考维基百科[1]：",["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://en.wikipedia.org/wiki/Persistent_data_structure","children":"Persistent_data_structure"}]]}]
2c:["$","p",null,{"children":"这里参考的是 llvm 中的 ImmutableMap/ImmutableSet 实现，采用一个平衡因子为 2 的 AVL 树[2]:"}]
2d:["$","blockquote",null,{"children":["$","p",null,{"children":"ImmutableSet is an immutable (functional) set implementation based on an AVL tree. Adding or removing elements is done through a Factory object and results in the creation of a new ImmutableSet object. If an ImmutableSet already exists with the given contents, then the existing one is returned; equality is compared with a FoldingSetNodeID. The time and space complexity of add or remove operations is logarithmic in the size of the original set. There is no method for returning an element of the set, you can only check for membership."}]}]
2e:["$","p",null,{"children":"ImmutableSet 是基于 AVL 树的不可变（功能）集实现。添加或删除元素是通过 Factory 对象完成的，并导致创建新的 ImmutableSet 对象。如果具有给定内容的 ImmutableSet 已经存在，则返回现有的；通过与 FoldingSetNodeID 进行比较判断是否相等。添加或删除操作的时间和空间复杂度与原始集合的大小成对数。"}]
2f:["$","p",null,{"children":"没有返回集合元素的方法，您只能检查元素是否存在。"}]
30:["$","p",null,{"children":["关于 llvm 中 ImmutableSet 的原理和源代码实现，可以参考：",["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://blog.csdn.net/dashuniuniu/article/details/79981500","children":"clang static analyzer中的数据结构及内存分配策略 - ImmutableMap & ImmutableSet篇"}]]}]
31:["$","p",null,{"children":"感觉 llvm 里面实现的非常漂亮。"}]
32:["$","h2",null,{"className":"content-header","id":"用-rust-实现","children":[["$","a",null,{"className":"break-words","href":"#用-rust-实现","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"用 rust 实现"]}]
33:["$","p",null,{"children":"之所以要用 rust 写，很大一个方面是因为我很久没写 rust 了，需要重新复健一下（x），另外也是增加一点理解。"}]
34:["$","p",null,{"children":["rust 的所有权模型实际上非常适合写这种不可变数据结构，比可变的 AVL tree 实现起来要方便和直观地多。另外，使用引用计数智能指针虽然会带来一些额外的开销，但实际上极大地减轻了内存管理的压力。借由 ",["$","code",null,{"children":"RC"}]," 甚至可以把它当成可变 AVL 树来使用，比如："]}]
35:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"let map = ImmutableMap::new();\n"}],["$","span",null,{"className":"code-line","children":"let map = map.insert(1, \"abc\");\n"}],["$","span",null,{"className":"code-line","children":"let map = map.delete(1, \"abc\");\n"}],["$","span",null,{"className":"code-line","children":"let size = new_map.size();\n"}],["$","span",null,{"className":"code-line","children":"let data = new_map.get_val_as_ref(1);\n"}]]}]}]
36:["$","p",null,{"children":["和原版比起来，Factory 我还没有实现。同样，我是在一个 Set 的基础上包装成一个 Map 的，使用 ",["$","code",null,{"children":"path-copying"}]," 来实现可持久化，即在从根节点到插入节点的路径上把每个节点复制一遍。"]}]
37:["$","h3",null,{"className":"content-header","id":"类型定义","children":[["$","a",null,{"className":"break-words","href":"#类型定义","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"类型定义"]}]
38:["$","p",null,{"children":"先来看看类型实现的定义："}]
39:["$","ol",null,{"children":["$","li",null,{"children":"AVL 树节点："}]}]
3a:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"type AvlTreeImpl<T> = Option<Rc<TreeNode<T>>>;\n"}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":"#[derive(Clone, Debug)]\n"}],["$","span",null,{"className":"code-line","children":"struct TreeNode<T: PartialOrd + Clone> {\n"}],["$","span",null,{"className":"code-line","children":"    val: T,\n"}],["$","span",null,{"className":"code-line","children":"    height: u32,\n"}],["$","span",null,{"className":"code-line","children":"    left: AvlTreeImpl<T>,\n"}],["$","span",null,{"className":"code-line","children":"    right: AvlTreeImpl<T>,\n"}],["$","span",null,{"className":"code-line","children":"}\n"}]]}]}]
3b:["$","ol",null,{"start":"2","children":["$","li",null,{"children":"树的包装:"}]}]
3c:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"#[derive(Clone, Debug)]\n"}],["$","span",null,{"className":"code-line","children":"pub struct ImmutAvlTree<T: PartialOrd + Clone> {\n"}],["$","span",null,{"className":"code-line","children":"    root: AvlTreeImpl<T>,\n"}],["$","span",null,{"className":"code-line","children":"}\n"}]]}]}]
3d:["$","h3",null,{"className":"content-header","id":"插入","children":[["$","a",null,{"className":"break-words","href":"#插入","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"插入"]}]
3e:["$","p",null,{"children":"ImmutAvlTree 上面的函数入口："}]
3f:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"impl<T: PartialOrd + Clone> ImmutAvlTree<T> {\n"}],["$","span",null,{"className":"code-line","children":"    pub fn insert(&self, val: T) -> Self {\n"}],["$","span",null,{"className":"code-line","children":"        match self.root {\n"}],["$","span",null,{"className":"code-line","children":"            None => ImmutAvlTree {\n"}],["$","span",null,{"className":"code-line","children":"                root: TreeNode::new(val, None, None),\n"}],["$","span",null,{"className":"code-line","children":"            },\n"}],["$","span",null,{"className":"code-line","children":"            Some(ref root) => ImmutAvlTree {\n"}],["$","span",null,{"className":"code-line","children":"                root: root.as_ref().do_insert(val),\n"}],["$","span",null,{"className":"code-line","children":"            },\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}]]}]}]
40:["$","p",null,{"children":"接下来是每个节点的递归实现："}]
41:["$","ul",null,{"children":[["$","li",null,{"children":"如果左右子树非空，则继续递归插入；"}],["$","li",null,{"children":"如果为空，则创建一个新节点"}],["$","li",null,{"children":["不管是空还是非空，最后都会通过 balance_tree 重新平衡，和完成 ",["$","code",null,{"children":"path-copying"}]," 的创建节点。"]}]]}]
42:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"impl<T: PartialOrd + Clone> TreeNode<T> {\n"}],["$","span",null,{"className":"code-line","children":"    fn do_insert(&self, val: T) -> AvlTreeImpl<T> {\n"}],["$","span",null,{"className":"code-line","children":"        if val < self.val {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(ln) = &self.left {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(self.val.clone(), ln.do_insert(val), self.right.clone())\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(\n"}],["$","span",null,{"className":"code-line","children":"                    self.val.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    TreeNode::new(val, None, None),\n"}],["$","span",null,{"className":"code-line","children":"                    self.right.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                )\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else if val > self.val {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(rn) = &self.right {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(self.val.clone(), self.left.clone(), rn.do_insert(val))\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(\n"}],["$","span",null,{"className":"code-line","children":"                    self.val.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    self.left.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    TreeNode::new(val, None, None),\n"}],["$","span",null,{"className":"code-line","children":"                )\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else {\n"}],["$","span",null,{"className":"code-line","children":"            TreeNode::new(val, self.left.clone(), self.right.clone())\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}]]}]}]
43:["$","h3",null,{"className":"content-header","id":"再平衡","children":[["$","a",null,{"className":"break-words","href":"#再平衡","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"再平衡"]}]
44:["$","p",null,{"children":"接下来是 AVL 树的旋转："}]
45:["$","ul",null,{"children":[["$","li",null,{"children":"如果需要旋转，则复制所有相关节点；"}],["$","li",null,{"children":"如果不需要，则只创建对应的父节点；"}]]}]
46:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"impl<T: PartialOrd + Clone> TreeNode<T> {\n"}],["$","span",null,{"className":"code-line","children":"    /// rebalance tree or create new nodes\n"}],["$","span",null,{"className":"code-line","children":"    fn balance_tree(val: T, left: AvlTreeImpl<T>, right: AvlTreeImpl<T>) -> AvlTreeImpl<T> {\n"}],["$","span",null,{"className":"code-line","children":"        let left_height = TreeNode::get_height(&left);\n"}],["$","span",null,{"className":"code-line","children":"        let right_height = TreeNode::get_height(&right);\n"}],["$","span",null,{"className":"code-line","children":"        if left_height > right_height + BALANCE_FACTOR {\n"}],["$","span",null,{"className":"code-line","children":"            let left_node = left.as_ref().unwrap();\n"}],["$","span",null,{"className":"code-line","children":"            let ll_height = TreeNode::get_height(&left_node.left);\n"}],["$","span",null,{"className":"code-line","children":"            let lr_height = TreeNode::get_height(&left_node.right);\n"}],["$","span",null,{"className":"code-line","children":"            if ll_height > lr_height {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::new(\n"}],["$","span",null,{"className":"code-line","children":"                    left_node.val.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    left_node.left.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    TreeNode::new(val, left_node.right.clone(), right),\n"}],["$","span",null,{"className":"code-line","children":"                )\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                let lr_node = left_node.right.as_ref().unwrap();\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::new(\n"}],["$","span",null,{"className":"code-line","children":"                    lr_node.val.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    TreeNode::new(\n"}],["$","span",null,{"className":"code-line","children":"                        left_node.val.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                        left_node.left.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                        lr_node.left.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    ),\n"}],["$","span",null,{"className":"code-line","children":"                    TreeNode::new(val, lr_node.right.clone(), right),\n"}],["$","span",null,{"className":"code-line","children":"                )\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else if right_height > left_height + BALANCE_FACTOR {\n"}],["$","span",null,{"className":"code-line","children":"            let right_node = right.as_ref().unwrap();\n"}],["$","span",null,{"className":"code-line","children":"            let rl_height = TreeNode::get_height(&right_node.left);\n"}],["$","span",null,{"className":"code-line","children":"            let rr_height = TreeNode::get_height(&right_node.right);\n"}],["$","span",null,{"className":"code-line","children":"            if rr_height > rl_height {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::new(\n"}],["$","span",null,{"className":"code-line","children":"                    right_node.val.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    TreeNode::new(val, left, right_node.left.clone()),\n"}],["$","span",null,{"className":"code-line","children":"                    right_node.right.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                )\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                let rl_node = right_node.left.as_ref().unwrap();\n"}],"$L58","$L59","$L5a","$L5b","$L5c","$L5d","$L5e","$L5f","$L60","$L61","$L62","$L63","$L64","$L65"]}]}]
47:["$","h3",null,{"className":"content-header","id":"删除","children":[["$","a",null,{"className":"break-words","href":"#删除","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"删除"]}]
48:["$","p",null,{"children":"同样，类似插入："}]
49:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"    fn do_delete(&self, val: T) -> AvlTreeImpl<T> {\n"}],["$","span",null,{"className":"code-line","children":"        if val < self.val {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(ln) = &self.left {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(self.val.clone(), ln.do_delete(val), self.right.clone())\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                // not found val\n"}],["$","span",null,{"className":"code-line","children":"                None\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else if val > self.val {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(rn) = &self.right {\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(self.val.clone(), self.left.clone(), rn.do_delete(val))\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                // not found val\n"}],["$","span",null,{"className":"code-line","children":"                None\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else {\n"}],["$","span",null,{"className":"code-line","children":"            self.combine_trees(&self.left, &self.right)\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}]]}]}]
4a:["$","p",null,{"children":"接下来是寻找一个节点替代："}]
4b:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"    fn remove_min(&self) -> (AvlTreeImpl<T>, T) {\n"}],["$","span",null,{"className":"code-line","children":"        if let Some(ln) = &self.left {\n"}],["$","span",null,{"className":"code-line","children":"            let left = ln.remove_min();\n"}],["$","span",null,{"className":"code-line","children":"            (TreeNode::balance_tree(self.val.clone(), left.0, self.right.clone()), left.1)\n"}],["$","span",null,{"className":"code-line","children":"        } else {\n"}],["$","span",null,{"className":"code-line","children":"            (self.right.clone(), self.val.clone())\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}],["$","span",null,{"className":"code-line","children":"    fn combine_trees(&self, left: &AvlTreeImpl<T>, right: &AvlTreeImpl<T>) -> AvlTreeImpl<T> {\n"}],["$","span",null,{"className":"code-line","children":"        if let None = left {\n"}],["$","span",null,{"className":"code-line","children":"            right.clone()\n"}],["$","span",null,{"className":"code-line","children":"        } else if let None = right {\n"}],["$","span",null,{"className":"code-line","children":"            left.clone()\n"}],["$","span",null,{"className":"code-line","children":"        } else {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(right) = &self.right {\n"}],["$","span",null,{"className":"code-line","children":"                let new_right = right.remove_min();\n"}],["$","span",null,{"className":"code-line","children":"                TreeNode::balance_tree(new_right.1, left.clone(), new_right.0)\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                left.clone()\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}]]}]}]
4c:["$","p",null,{"children":"还有入口代码："}]
4d:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"impl<T: PartialOrd + Clone> ImmutAvlTree<T> {\n"}],["$","span",null,{"className":"code-line","children":"    pub fn delete(&self, val: T) -> Self {\n"}],["$","span",null,{"className":"code-line","children":"        match self.root {\n"}],["$","span",null,{"className":"code-line","children":"            None => ImmutAvlTree { root: None },\n"}],["$","span",null,{"className":"code-line","children":"            Some(ref root) => {\n"}],["$","span",null,{"className":"code-line","children":"                let result = root.as_ref().do_delete(val);\n"}],["$","span",null,{"className":"code-line","children":"                if let Some(_) = result {\n"}],["$","span",null,{"className":"code-line","children":"                    ImmutAvlTree { root: result }\n"}],["$","span",null,{"className":"code-line","children":"                } else {\n"}],["$","span",null,{"className":"code-line","children":"                    ImmutAvlTree {\n"}],["$","span",null,{"className":"code-line","children":"                        root: self.root.clone(),\n"}],["$","span",null,{"className":"code-line","children":"                    }\n"}],["$","span",null,{"className":"code-line","children":"                }\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}]]}]}]
4e:["$","h3",null,{"className":"content-header","id":"查找","children":[["$","a",null,{"className":"break-words","href":"#查找","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"查找"]}]
4f:["$","p",null,{"children":"正常的二叉树查找："}]
50:["$","$L57",null,{"children":["$","code",null,{"className":"code-highlight language-rs","children":[["$","span",null,{"className":"code-line","children":"    pub fn get_as_ref(&self, val: T) -> Option<&T> {\n"}],["$","span",null,{"className":"code-line","children":"        if val < self.val {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(ln) = &self.left {\n"}],["$","span",null,{"className":"code-line","children":"                ln.get_as_ref(val)\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                None\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else if val > self.val {\n"}],["$","span",null,{"className":"code-line","children":"            if let Some(rn) = &self.right {\n"}],["$","span",null,{"className":"code-line","children":"                rn.get_as_ref(val)\n"}],["$","span",null,{"className":"code-line","children":"            } else {\n"}],["$","span",null,{"className":"code-line","children":"                None\n"}],["$","span",null,{"className":"code-line","children":"            }\n"}],["$","span",null,{"className":"code-line","children":"        } else {\n"}],["$","span",null,{"className":"code-line","children":"            Some(&self.val)\n"}],["$","span",null,{"className":"code-line","children":"        }\n"}],["$","span",null,{"className":"code-line","children":"    }\n"}]]}]}]
51:["$","h2",null,{"className":"content-header","id":"参考","children":[["$","a",null,{"className":"break-words","href":"#参考","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"参考"]}]
52:["$","p",null,{"children":["本文完整源代码：",["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/yunwei37/immutable-map-rs","children":"immutable-map-rs"}]]}]
53:["$","ol",null,{"children":[["$","li",null,{"children":["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://en.wikipedia.org/wiki/Persistent_data_structure","children":"Persistent_data_structure"}]}],["$","li",null,{"children":["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://zh.wikipedia.org/zh-hans/AVL%E6%A0%91","children":"AVL树"}]}],["$","li",null,{"children":["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://llvm.org/docs/ProgrammersManual.html#llvm-adt-immutableset-h","children":"https://llvm.org/docs/ProgrammersManual.html#llvm-adt-immutableset-h"}]}],["$","li",null,{"children":["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://blog.csdn.net/dashuniuniu/article/details/79981500","children":"clang static analyzer中的数据结构及内存分配策略 - ImmutableMap & ImmutableSet篇"}]}]]}]
54:["$","div",null,{"className":"pt-6 pb-6 text-sm text-gray-700 dark:text-gray-300 glass p-4 rounded-xl","children":[["$","a",null,{"className":"hover:text-primary-600 dark:hover:text-primary-400 transition-colors","target":"_blank","rel":"nofollow","href":"https://mobile.twitter.com/search?q=https%3A%2F%2Fwww.yunwei37.com%2Fblog%2Fimmutablemap","children":"Discuss on Twitter"}]," • ",["$","a",null,{"className":"hover:text-primary-600 dark:hover:text-primary-400 transition-colors","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/yunwei37/my-new-blog/blob/main/data/blog/immutablemap.mdx","children":"View on GitHub"}]]}]
55:["$","div",null,{"className":"pt-6 pb-6 text-center text-gray-700 dark:text-gray-300 glass p-6 rounded-xl","id":"comment","children":["$","$L66",null,{"slug":"immutablemap"}]}]
56:["$","footer",null,{"children":[["$","div",null,{"className":"divide-gray-200/30 text-sm leading-5 font-medium xl:col-start-1 xl:row-start-2 xl:divide-y dark:divide-gray-700/30","children":[["$","div",null,{"className":"py-4 xl:py-8","children":[["$","h2",null,{"className":"text-xs tracking-wide text-gray-600 uppercase dark:text-gray-300 mb-4","children":"Tags"}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","$L6","notes",{"href":"/tags/notes","className":"inline-block px-3 py-1 text-xs font-medium uppercase tracking-wide bg-primary-100 hover:bg-primary-200 dark:bg-primary-900/30 dark:hover:bg-primary-800/40 rounded-full transition-all duration-200 text-primary-800 hover:text-primary-900 dark:text-primary-300 dark:hover:text-primary-200 border border-primary-200/50 dark:border-primary-700/50","children":"notes"}]]}]]}],["$","div",null,{"className":"flex justify-between py-4 xl:block xl:space-y-6 xl:py-8","children":[["$","div",null,{"className":"glass p-4 rounded-xl","children":[["$","h2",null,{"className":"text-xs tracking-wide text-gray-600 uppercase dark:text-gray-300 mb-2","children":"Previous Article"}],["$","div",null,{"className":"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 transition-colors","children":["$","$L6",null,{"className":"break-words","href":"/blog/immutablelist","children":"llvm 源码中的数据结构：ImmutableList"}]}]]}],["$","div",null,{"className":"glass p-4 rounded-xl","children":[["$","h2",null,{"className":"text-xs tracking-wide text-gray-600 uppercase dark:text-gray-300 mb-2","children":"Next Article"}],["$","div",null,{"className":"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 transition-colors","children":["$","$L6",null,{"className":"break-words","href":"/blog/csa1","children":"Clang static analyzer Checker 初探"}]}]]}]]}]]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L6",null,{"className":"inline-flex items-center glass px-4 py-2 rounded-xl text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 transition-all duration-200 hover:scale-105","href":"/blog","aria-label":"Back to the blog","children":"← Back to the blog"}]}]]}]
58:["$","span",null,{"className":"code-line","children":"                TreeNode::new(\n"}]
59:["$","span",null,{"className":"code-line","children":"                    rl_node.val.clone(),\n"}]
5a:["$","span",null,{"className":"code-line","children":"                    TreeNode::new(val, left, rl_node.left.clone()),\n"}]
5b:["$","span",null,{"className":"code-line","children":"                    TreeNode::new(\n"}]
5c:["$","span",null,{"className":"code-line","children":"                        rl_node.val.clone(),\n"}]
5d:["$","span",null,{"className":"code-line","children":"                        rl_node.right.clone(),\n"}]
5e:["$","span",null,{"className":"code-line","children":"                        right_node.right.clone(),\n"}]
5f:["$","span",null,{"className":"code-line","children":"                    ),\n"}]
60:["$","span",null,{"className":"code-line","children":"                )\n"}]
61:["$","span",null,{"className":"code-line","children":"            }\n"}]
62:["$","span",null,{"className":"code-line","children":"        } else {\n"}]
63:["$","span",null,{"className":"code-line","children":"            TreeNode::new(val, left, right)\n"}]
64:["$","span",null,{"className":"code-line","children":"        }\n"}]
65:["$","span",null,{"className":"code-line","children":"    }\n"}]
23:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
1f:null
21:{"metadata":[["$","title","0",{"children":"用 rust 实现可持久化 AVL 树：ImmutableMap | 云微的胡思乱想"}],["$","meta","1",{"name":"robots","content":"index, follow"}],["$","meta","2",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","3",{"rel":"canonical","href":"https://www.yunwei37.com/blog/immutablemap"}],["$","link","4",{"rel":"alternate","type":"application/rss+xml","href":"https://www.yunwei37.com/feed.xml"}],["$","meta","5",{"property":"og:title","content":"用 rust 实现可持久化 AVL 树：ImmutableMap"}],["$","meta","6",{"property":"og:url","content":"https://www.yunwei37.com/blog/immutablemap"}],["$","meta","7",{"property":"og:site_name","content":"云微的胡思乱想"}],["$","meta","8",{"property":"og:locale","content":"en_US"}],["$","meta","9",{"property":"og:image","content":"https://www.yunwei37.com/static/images/twitter-card.png"}],["$","meta","10",{"property":"og:type","content":"article"}],["$","meta","11",{"property":"article:published_time","content":"2022-03-18T02:41:06.000Z"}],["$","meta","12",{"property":"article:modified_time","content":"2022-03-18T02:41:06.000Z"}],["$","meta","13",{"property":"article:author","content":"Yusheng Zheng (云微)"}],["$","meta","14",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","15",{"name":"twitter:title","content":"用 rust 实现可持久化 AVL 树：ImmutableMap"}],["$","meta","16",{"name":"twitter:image","content":"https://www.yunwei37.com/static/images/twitter-card.png"}]],"error":null,"digest":"$undefined"}
26:"$21:metadata"
